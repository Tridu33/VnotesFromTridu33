vnote_backup_file_826537664 C:/Users/admin/Documents/vnote_notebooks/！复分析可视化教材动图manim绘制/源码级初学指南/磨刀石.md
# 磨刀石

https://blog.csdn.net/u012999985/article/details/80877671  态度


```BASH
Foo/
|-- bin/
|   |-- foo #可执行程序，启动foo调main.py
|
|-- foo/ #主程序目录
|   |-- tests/   #测试程序目录
|   |   |-- __init__.py
|   |   |-- test_main.py
|   |
|   |-- __init__.py  #空文件，有这个文件就是包，没有就是目录
|   |-- main.py  #程序主入口
|
|-- docs/  #文档
|   |-- conf.py
|   |-- abc.rst
|
|--conf/   #配置文件目录
|
|-- setup.py  #安装部署脚本
|-- requirements.txt   #依赖关系，需要依赖的文件
|-- README
bin/: 存放项目的一些可执行文件，当然你可以起名script/之类的也行。
foo/: 存放项目的所有源代码。
    (1) 源代码中的所有模块、包都应该放在此目录。不要置于顶层目录。
    (2) 其子目录tests/存放单元测试代码； 
    (3) 程序的入口最好命名为main.py。
docs/: 存放一些文档。
setup.py: 安装、部署、打包的脚本。
requirements.txt: 存放软件依赖的外部Python包列表。
README: 项目说明文件。


```

```python
.tx/            如果你使用Transifex进行国际化的翻译工作，创建此目录
    config      Transifex的配置文件
$PROJ_NAME/     按照你实际的项目名称创建目录。如果有多个子项目，就创建多个目录
docs/           项目文档
wiki/           如果有wiki，可以创建此目录
scripts/        项目用到的各种脚本
tests/          测试代码
extras/         扩展，不属于项目必需的部分，但是与项目相关的sample、poc等，下面给出4个例子：
    dev_example/
    production_example/
    test1_poc/
    test2_poc/
.gitignore      版本控制文件，现在git比较流行
AUTHORS         作者清单
INSTALL         安装说明
LICENSE         版权声明
MANIFEST.in     装箱清单文件
MAKEFILE        编译脚本
README          项目说明文件，其他需要的目录下也可以放一个README文件，说明该目录的内容
setup.py        python模块的安装脚本
```
https://blog.csdn.net/justin18chan/article/details/78516505

Visual Studio Code 跳转函数类具体定义实现的地方：

F12

ctrl+单击


windows系统:

Alt+← .. navigate back

Alt+→ .. navigate forward



工程项目结构需要先弄清三个概念：包、模块、类

        模块对应的是一个.py 文件，那么module_name 就是这个文件去掉.py 之后的文件名，py 文件中可以直接定义一些变量、函数、类。

导入模块

import module_name

from package_name import module_name

from package_name import *

那么如何import 时，python 解释器如何才能找到该模块放置的文件位置呢？python 寻找模块的优先级如下：

1、   当前文件目录

2、   环境变量PYTHONPATH

3、   sys.path(list 类型)

        模块在被导入执行时，python解释器为加快程序的启动速度，会在与模块文件同一目录下生成.pyc文件。我们知道python是解释性的脚本语言，而.pyc是经过编译后的字节码，这一工作会自动完成，而无需程序员手动执行。

包

        将某些功能相近的文件组织在同一文件夹下，就需要运用包的概念。包对应于文件夹，使用包的方式跟模块也类似，唯一需要注意的是，当文件夹当作包使用时，文件夹需要包含__init__.py文件，主要是为了避免将文件夹名当作普通的字符串。__init__.py的内容可以为空，一般用来进行包的某些初始化工作或者设置__all__值，__all__是在from package-name import *这语句使用的，全部导出定义过的模块。

        Python使用缩进对齐组织代码的执行，所有没有缩进的代码（非函数定义和类定义），都会在载入时自动执行，这些代码，可以认为是Python的main函数。

        每个文件（模块）都可以任意写一些没有缩进的代码，并且在载入时自动执行，为了区分主执行文件还是被调用的文件，Python引入了一个变量__name__，当文件是被调用时，__name__的值为模块名，当文件被执行时，__name__为'__main__'。这个特性，为测试驱动开发提供了支持，可以在每个模块中写上测试代码，这些测试代码仅当模块被Python直接执行时才会运行，代码和测试完美的结合在一起。

__init__.py

__init__.py可以为空，只要它存在，就表明此目录应被作为一个package处理。当然，__init__.py中也可以设置相应的内容。

__init__ 方法通常用在初始化一个类实例的时候

__all__

在模块(*.py)中使用导出__all__列表里的类、函数、变量等成员，否则将导出所有不以下划线开头（私有）的成员，在模块中使用__all__属性可避免在相互引用时的命名冲突

__path__变量

__path__指定了包的搜索路径

__new__

__new__方法接受的参数虽然也是和__init__一样，但__init__是在类实例创建之后调用，而 __new__方法正是创建这个类实例的方法

        依照Python官方文档的说法，__new__方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程的途径。还有就是实现自定义的metaclass。


————————————————
版权声明：本文为CSDN博主「badman250」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
部分原文链接：https://blog.csdn.net/notbaron/article/details/70148624


这个链接排版好，内容清晰很多
https://blog.csdn.net/DreamcoffeeZS/article/details/80608439


















































