vnote_backup_file_826537664 D:/tridu33/Nutstore/VnotesFromTridu33/CodePLT/git/git学习git教程git文档/git在线学习.md





```
-d  --delete：删除

-D  --delete --force的快捷键

-f  --force：强制

-m  --move：移动或重命名

-M  --move --force的快捷键

-r  --remote：远程

-a  --all：所有
```

https://git-scm.com/docs/git-rebase/en
欢迎中文翻译教程项目

https://github.com/Tridu33/git-manpages-l10n

进度
https://hosted.weblate.org/projects/git-manpages/translations/







# 1. git在线学习

原本在英文文档最全，我直接编辑在中文文档位置顺便当作备忘录直接tldr命令可查询就行。

```
git branch --help
```

[太长不看TLDR本地git文档教程](file:///C:/Users/tridu33/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc/LocalState/rootfs/home/tridu33/.tldr/tldr/pages.es/common/)

实验楼类似的git实验学习平台


[本地代码存放位置](file:///D:\tridu33\git学习)

https://learngitbranching.js.org/?locale=zh_CN

[git教程](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2#log_options)

```
$ git checkout -b iss53
Switched to a new branch "iss53"

等价

$ git branch iss53
$ git checkout iss53

git commit -a -m 'added a new footer [issue 53]'











```










git log

```
-p

按补丁格式显示每个提交引入的差异。

--stat

显示每次提交的文件修改统计信息。

--shortstat

只显示 --stat 中最后的行数修改添加移除统计。

--name-only

仅在提交信息后显示已修改的文件清单。

--name-status

显示新增、修改、删除的文件清单。

--abbrev-commit

仅显示 SHA-1 校验和所有 40 个字符中的前几个字符。

--relative-date

使用较短的相对时间而不是完整格式显示日期（比如“2 weeks ago”）。

--graph

在日志旁以 ASCII 图形显示分支与合并历史。

--pretty

使用其他格式显示历史提交信息。可用的选项包括 oneline、short、full、fuller 和 format（用来定义自己的格式）。

--oneline

--pretty=oneline --abbrev-commit 合用的简写。
```



# 2. rebase整理分支








```bash
  git rebase -i  [startpoint]  [endpoint]
```
























其中-i的意思是--interactive，即弹出交互式的界面让用户编辑完成合并操作，[startpoint] [endpoint]则指定了一个编辑区间，如果不指定[endpoint]，则该区间的终点默认是当前分支HEAD所指向的commit(注：该区间指定的是一个前开后闭的区间)。
链接：https://www.jianshu.com/p/4a8f4af4e803


    首先，git 会把 feature1 分支里面的每个 commit 取消掉；
    其次，把上面的操作临时保存成 patch 文件，存在 .git/rebase 目录下；
    然后，把 feature1 分支更新到最新的 master 分支；
    最后，把上面保存的 patch 文件应用到 feature1 分支上
http://jartto.wang/2018/12/11/git-rebase/


在 rebase 的过程中，也许会出现冲突 conflict。在这种情况，git 会停止 rebase 并会让你去解决冲突。在解决完冲突后，用 git add 命令去更新这些内容。

注意，你无需执行 git-commit，只要执行 continue

```
git rebase --continue
```
这样 git 会继续应用余下的 patch 补丁文件。













































